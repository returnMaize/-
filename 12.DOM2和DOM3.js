DOM1级主要定义的是HTML和XML文档的底层结构 DOM2和DOM3级则在这个接口的基础上引入了更多的交互能力 也支持了更高级的XML特性 为此 DOM2和DOM3级分许多模块 模块之间具有某种关联 分别描述了DOM的某个非常具体的子集 这些模块如下
DOM2级核心 在1级核心基础上构建 为节点添加了更多方法和属性
DOM2级视图 为文档定义了基于样式信息的不同视图
DOM2级事件 说明了如何使用事件与DOM文档交互
DOM2级样式 定义了如何以编程方式来访问和改变CSS样式信息
DOM2级遍历和范围 引入了遍历DOM文档和选择其特定部分的新接口

检测浏览器是否支持这些DOM模块
document.implementation.hasFeature('Core', '2.0')
document.implementation.hasFeature('Core', '3.0')
document.implementation.hasFeature('HTML', '2.0')
document.implementation.hasFeature('Views', '2.0')
document.implementation.hasFeature('XML', '2.0')

访问元素样式
element.style.小驼峰
多数情况下可以通过这种简单的转换属性名来实现转换 但是也有一些特殊的css属性
float float是js的保留字 因此不能作为属性名 element.style.cssFloat IE element.style.styleFloat


错误处理在程序设计中的重要性是毋庸置疑的 任何有影响力的web应用程序都需哟啊一套完整的错误处理机制 当然 大多数佼佼者确实做到了这一点 但通常只有服务端应用程序才能做到如此 实际上 服务端团队往往会在错误处理机制上投入较大的精力 通常要考虑按类型 频率 或者其他重要的标准对错误进行分类 这样以来 开发人员就能够理解用户在使用简单数据库查询或者报告生成脚本时 应用程序可能会出现的问题
虽然客户端应用程序的错误处理也同样重要 但真正受到重视 还是最近几年的事 实际上 我们要面对这样一个不争的事实 使用web的绝大多数人都不是技术高手 其中甚至有很多人根本不明白浏览器到底是什么 更不用说他们说喜欢哪一个 本章前面讨论过 每个浏览器在发生js错误的时的行为都或多或少有一些差异 有的会显示小图标 有的则什么动静都没有 浏览器对js错误的这些默认行为对最终用户而言 毫无规律可循 最理想的情况下 用户遇到错误搞不清为什么 他们会再试着重做一次 最糟糕的情况下 用户会恼羞成怒 一去不复返了 良好的错误处理机制可以让用户及时得到提醒 知道到底发生了什么事 因而不会惊慌失措 为此 作为开发人员 我们必须理解处理js错误的时候 都有那些手段和工具可以使用

