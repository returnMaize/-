typeof ： 判断值属于那种基本类型

instanceof操作符: （判断一个值是那种引用类型）
{
  判断对象属于什么类型的对象
}

执行环境和作用域
{
  所有的变量都存在于一个执行环境（也称作用域）当中
  执行环境分 全局执行环境和函数执行环境
  每次进入一个新的执行环境 都会创建一个用于搜索变量和函数的作用域链
}

垃圾收集
{
  1. 标记清除（JavaScript中最常用的垃圾收集方式）
  垃圾收集器会在运行的时候给存储在内存中的所有变量都加上标记 然后 他会去掉环境中的变量以及被环境中的变量引用的变量标记 在此之后还有标记的变量被视为准备删除的变量
  到2008年为止 ie 火狐 Opera Chrome 和 Safari的javaScript实现使用的都是标记清除式的垃圾收集策略 只不过垃圾收集的时间间隔互不相同

  2. 引用计数
  记录每个值的引用次数 当申明一个变量将一个引用类型的值赋给改变量时 这个值的引用次数为1 如果同一个值又被赋值给另外一个变量 则改值引用次数加1 如果包含这个值的变量又取得了另外一个值 则这个值的引用次数减1 当值的引用次数变为0时 则这个变量被认为是垃圾
  Netscape Navigator 3.0最早使用技术策略的浏览器
  缺陷：循环引用
  IE中有一部分对象不是原生的JavaScript对象 例如其BOM和DOM中的对象就是使用C++以COM对象实现的 而COM对象的垃圾收集机制采用的就是引用计数
  为了解决这个问题 IE9把BOM和DOM对象都转换成了真正的JavaScript对象

  性能问题：
  垃圾回收机制是周期性运行的

  管理内存：
  由于分配给浏览器的可用内存数量通常要比分配给桌面应用程序要少（目的防止运行JavaScript的网页耗尽全部系统内存而导致系统崩溃）
  因此 确保占用最少的内存可以让页面获得更好的性能 而优化内存的占用的最佳执行方式就是为执行中的代码只保存必要的数据 一旦数据不在有用 最好通过将其设置为null的方式来释放其引用 这种做法叫做 解除引用

  解除引用不仅有助于消除循环引用现象 而且对垃圾收集也有好处 为了确保有效的回收内存 应该及时解除不再使用的全局对象 全局对象属性以及循环引用变量的引用
}

